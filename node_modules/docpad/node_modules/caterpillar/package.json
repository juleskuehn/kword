{
  "title": "Caterpillar",
  "name": "caterpillar",
  "version": "2.0.7",
  "description": "Caterpillar is the ultimate logging system for Node.js, based on transform streams you can log to it and pipe the output off to different locations, including some pre-made ones. Caterpillar also supports log levels according to the RFC standard, as well as line, method, and file fetching for messages. You can even use it in web browsers with caterpillar-browser.",
  "homepage": "https://github.com/bevry/caterpillar",
  "license": {
    "type": "MIT"
  },
  "badges": {
    "travis": true,
    "npm": true,
    "gittip": "bevry",
    "flattr": "344188/balupton-on-Flattr",
    "paypal": "QB8GQPZAH84N6"
  },
  "keywords": [
    "caterpillar",
    "console",
    "log",
    "logger",
    "logging",
    "debug",
    "stream",
    "transform"
  ],
  "author": {
    "name": "2012+ Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "balupton",
      "email": "b@lupton.cc"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    },
    {
      "name": "t-visualappeal",
      "url": "https://github.com/t-visualappeal"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/caterpillar/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bevry/caterpillar.git"
  },
  "engines": {
    "node": ">=0.8"
  },
  "browsers": true,
  "dependencies": {
    "extendr": "~2.1.0",
    "readable-stream": "~1.1.9"
  },
  "devDependencies": {
    "caterpillar-filter": "2.x",
    "caterpillar-human": "2.x",
    "caterpillar-browser": "2.x",
    "coffee-script": "~1.6.3",
    "joe": "~1.3.0",
    "joe-reporter-console": "~1.2.1",
    "chai": "~1.8.1",
    "projectz": "~0.3.0"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "scripts": {
    "test": "node ./out/test/caterpillar-test.js",
    "browserify": "browserify -e example.js > example-browser.js",
    "webpack": "webpack --progress --colors ./example.js example-browser.js"
  },
  "main": "./out/lib/caterpillar.js",
  "readme": "\n<!-- TITLE/ -->\n\n# Caterpillar\n\n<!-- /TITLE -->\n\n\n<!-- BADGES/ -->\n\n[![Build Status](http://img.shields.io/travis-ci/bevry/caterpillar.png?branch=master)](http://travis-ci.org/bevry/caterpillar \"Check this project's build status on TravisCI\")\n[![NPM version](http://badge.fury.io/js/caterpillar.png)](https://npmjs.org/package/caterpillar \"View this project on NPM\")\n[![Gittip donate button](http://img.shields.io/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](http://img.shields.io/flattr/donate.png?color=yellow)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](http://img.shields.io/paypal/donate.png?color=yellow)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\n<!-- /BADGES -->\n\n\nCaterpillar is the ultimate logging system for Node.js, based on [transform streams](http://nodejs.org/api/stream.html#stream_class_stream_transform) you can log to it and pipe the output off to different locations, including [some pre-made ones](http://npmjs.org/keyword/caterpillar-transform). Caterpillar also supports log levels according to the [RFC standard](http://www.faqs.org/rfcs/rfc3164.html), as well as line, method, and file fetching for messages. You can even use it in web browsers with the [Browser Transform](https://github.com/bevry/caterpillar-browser).\n\n\n<!-- INSTALL/ -->\n\n## Install\n\n### [Node](http://nodejs.org/)\n- Use: `require('caterpillar')`\n- Install: `npm install --save caterpillar`\n\n### [Browserify](http://browserify.org/)\n- Use: `require('caterpillar')`\n- Install: `npm install --save caterpillar`\n- CDN URL: `//wzrd.in/bundle/caterpillar@2.0.7`\n\n### [Ender](http://ender.jit.su/)\n- Use: `require('caterpillar')`\n- Install: `ender add caterpillar`\n\n<!-- /INSTALL -->\n\n\n## Usage\n\n### Example with the [Filter](https://github.com/bevry/caterpillar-filter) and [Human](https://github.com/bevry/caterpillar-human) transforms\n\n``` javascript\n// Import\nvar level   = process.argv.indexOf('-d') === -1 ? 6 : 7;\nvar logger  = require('caterpillar').createLogger({level:level});\nvar filter  = require('caterpillar-filter').createFilter();\nvar human   = require('caterpillar-human').createHuman();\n\n// Where to output?\nif ( process.title === 'browser' ) {\n\t// Include the browser compatibility layer\n\tvar browser = require('caterpillar-browser').createBrowser();\n\n\t// Pipe to filter to human to browser\n\tlogger.pipe(filter).pipe(human).pipe(browser);\n}\nelse {\n\t// Pipe to filter to human to stdout\n\tlogger.pipe(filter).pipe(human).pipe(process.stdout);\n\n\t// If we are debugging, then write the original logger data to debug.log\n\tif ( level === 7 ) {\n\t\tlogger.pipe(require('fs').createWriteStream('./debug.log'));\n\t}\n}\n\n// Log messages\nlogger.log('emergency', 'this is level 0');\nlogger.log('emerg', 'this is level 0');\nlogger.log('alert', 'this is level 1');\nlogger.log('critical', 'this is level 2');\nlogger.log('crit', 'this is level 2');\nlogger.log('error', 'this is level 3');\nlogger.log('err', 'this is level 3');\nlogger.log('warning', 'this is level 4');\nlogger.log('warn', 'this is level 4');\nlogger.log('notice', 'this is level 5');\nlogger.log('note', 'this is level 5');\nlogger.log('info', 'this is level 6');\nlogger.log('default', 'this is level 6');\nlogger.log('debug', 'this is level 7');\nlogger.log('this is level 6, the default level');\nlogger.log('you','can','also','use','as','many','arguments','as','you','want',1,[2,3],{four:5});\n```\n\nResult with log level 6 (info):\n\n<img src=\"http://d.pr/i/DBFD+\"/>\n\n\nResult with log level 7 (debug):\n\n<img src=\"http://d.pr/i/IZ8I+\"/>\n\n\nResult with log level 7 (debug) in the browser with the [Browser Transform](https://github.com/bevry/caterpillar-browser)\n\n<img src=\"http://d.pr/i/SK8d+\">\n\n\n### Transform API, extends [stream.Transform](http://nodejs.org/api/stream.html#stream_class_stream_transform)\n\n``` javascript\nnew (require('caterpillar').Transform)(config)\n```\n\n- Methods\n\t- `constructor(config?)` create our new instance with the config, config is optional\n\t- `pipe(child)` pipe our stream to the child, also sync our config to it\n\t- `setConfig(config)` set the configuration and emit the `config` event\n\t- `getConfig()` get the configuration\n\t- `format(entry)` format the caterpillar logger entry\n- Configuration\n\t- none by default\n- Events\n\t- `config(config)` emitted once our configuration has updated\n\n\n### Logger API, extends Transform API\n\n``` javascript\nnew (require('caterpillar').Logger)(config)\n```\n\n- Methods\n\t- `constructor(config?)` create our new instance with the config, config is optional\n\t- `log(args...)` write a log message, the first argument is suppose to be the level (will use the default level if it isn't)\n\t- `format(level, args...)` create a log entry ready for writing to the logger stream, output is as follows:\n\n\t\t``` javascript\n\t\t{\n\t\t\t\"args\": [\"this is emergency and is level 0\"],\n\t\t\t\"date\": \"2013-04-25T10:18:25.722Z\",\n\t\t\t\"levelNumber\": 0,\n\t\t\t\"levelName\": \"emergency\",\n\t\t\t\"line\": \"59\",\n\t\t\t\"method\": \"Task.fn\",\n\t\t\t\"file\": \"/Users/balupton/Projects/caterpillar/out/test/caterpillar-test.js\"\n\t\t}\n\t\t```\n\n\t- `getLevelNumber(name)` get the level number for the level name\n\t- `getLevelName(number)` get the level name for the level number\n\t- `getLevelInfo(nameOrNumber)` get the level name and number for either a level name or number\n\t- `getLineInfo()` get the file, method, and line that the `log` method was called on\n\n- Configuration\n\t- `lineOffset` the amount of lines to offset when doing our line detection, useful for wrappers, defaults to `0`\n\t- `levels` the level names and their associated number, also includes `default` for when no level was specified, defaults to:\n\t\n\t\t``` javascript\n\t\t{\n\t\t\temergency: 0,\n\t\t\talert: 1,\n\t\t\tcritical: 2,\n\t\t\terror: 3,\n\t\t\twarning: 4,\n\t\t\tnotice: 5,\n\t\t\tinfo: 6,\n\t\t\tdebug: 7,\n\n\t\t\temerg: 0,\n\t\t\tcrit: 2,\n\t\t\terr: 3,\n\t\t\twarn: 4,\n\t\t\tnote: 5,\n\n\t\t\tdefault: 6\n\t\t}\n\t\t```\n\n- Events\n\t- only those inherited\n\n\n\n<!-- HISTORY/ -->\n\n## History\n[Discover the change history by heading on over to the `HISTORY.md` file.](https://github.com/bevry/caterpillar/blob/master/HISTORY.md#files)\n\n<!-- /HISTORY -->\n\n\n<!-- BACKERS/ -->\n\n## Backers\n\n### Maintainers\n\nThese amazing people are maintaining this project:\n\n- Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)\n\n### Sponsors\n\nNo sponsors yet! Will you be the first?\n\n[![Gittip donate button](http://img.shields.io/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](http://img.shields.io/flattr/donate.png?color=yellow)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](http://img.shields.io/paypal/donate.png?color=yellow)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\n### Contributors\n\nThese amazing people have contributed code to this project:\n\n- Benjamin Lupton <b@lupton.cc> (https://github.com/balupton) - [view contributions](https://github.com/bevry/caterpillar/commits?author=balupton)\n- t-visualappeal (https://github.com/t-visualappeal) - [view contributions](https://github.com/bevry/caterpillar/commits?author=t-visualappeal)\n\n[Become a contributor!](https://github.com/bevry/caterpillar/blob/master/CONTRIBUTING.md#files)\n\n<!-- /BACKERS -->\n\n\n<!-- LICENSE/ -->\n\n## License\n\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT license](http://creativecommons.org/licenses/MIT/)\n\nCopyright &copy; 2012+ Bevry Pty Ltd <us@bevry.me> (http://bevry.me)\n<br/>Copyright &copy; 2011 Benjamin Lupton <b@lupton.cc> (http://balupton.com)\n\n<!-- /LICENSE -->\n\n\n",
  "readmeFilename": "README.md",
  "_id": "caterpillar@2.0.7",
  "dist": {
    "shasum": "8881fdcd7e3a9dbe446c6e3ec827f7e17d6dc776",
    "tarball": "http://registry.npmjs.org/caterpillar/-/caterpillar-2.0.7.tgz"
  },
  "_from": "caterpillar@~2.0.7",
  "_npmVersion": "1.3.15",
  "_npmUser": {
    "name": "balupton",
    "email": "b@lupton.cc"
  },
  "_shasum": "8881fdcd7e3a9dbe446c6e3ec827f7e17d6dc776",
  "_resolved": "https://registry.npmjs.org/caterpillar/-/caterpillar-2.0.7.tgz"
}
