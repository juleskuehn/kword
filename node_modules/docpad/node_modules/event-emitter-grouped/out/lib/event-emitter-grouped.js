// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, EventEmitterGrouped, TaskGroup, ambi, attach, inheritInto,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  ambi = require('ambi');

  TaskGroup = require('taskgroup').TaskGroup;

  EventEmitterGrouped = (function(_super) {
    __extends(EventEmitterGrouped, _super);

    function EventEmitterGrouped() {
      return EventEmitterGrouped.__super__.constructor.apply(this, arguments);
    }

    EventEmitterGrouped.prototype.getListenerGroup = function() {
      var args, eventName, listenerObjects, me, next, tasks, _i;
      eventName = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), next = arguments[_i++];
      me = this;
      tasks = new TaskGroup("EventEmitterGrouped for " + eventName).done(next);
      listenerObjects = this.listeners(eventName).slice().map(function(listener) {
        var listenerObject;
        listenerObject = {};
        if (listener.listener) {
          listenerObject.actual = listener.listener;
          listenerObject.fire = [listener.bind(me), listener.listener];
        } else {
          listenerObject.actual = listener;
          listenerObject.fire = listener.bind(me);
        }
        listenerObject.priority = listenerObject.actual.priority || 0;
        listenerObject.name = listenerObject.name || ("Untitled listener for [" + eventName + "] with priority [" + listenerObject.priority + "]");
        return listenerObject;
      });
      listenerObjects.sort(function(a, b) {
        return b.priority - a.priority;
      });
      listenerObjects.forEach(function(listenerObject) {
        return tasks.addTask(listenerObject.name, function(complete) {
          return ambi.apply(null, [listenerObject.fire].concat(__slice.call(args), [complete]));
        });
      });
      return tasks;
    };

    EventEmitterGrouped.prototype.off = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.removeListener.apply(this, args);
    };

    EventEmitterGrouped.prototype.emitSerial = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.getListenerGroup.apply(this, args).run();
    };

    EventEmitterGrouped.prototype.emitParallel = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.getListenerGroup.apply(this, args).setConfig({
        concurrency: 0
      }).run();
    };

    return EventEmitterGrouped;

  })(EventEmitter);

  attach = function(somethingElse) {
    var key, value, _ref;
    _ref = EventEmitterGrouped.prototype;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      value = _ref[key];
      somethingElse[key] = value;
    }
    return somethingElse;
  };

  inheritInto = function(somethingElse) {
    return util.inherits(somethingElse, EventEmitterGrouped);
  };

  module.exports = {
    EventEmitterGrouped: EventEmitterGrouped,
    attach: attach,
    inheritInto: inheritInto
  };

}).call(this);
