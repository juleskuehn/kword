// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var LivereloadPlugin;
    return LivereloadPlugin = (function(_super) {
      __extends(LivereloadPlugin, _super);

      function LivereloadPlugin() {
        return LivereloadPlugin.__super__.constructor.apply(this, arguments);
      }

      LivereloadPlugin.prototype.name = 'livereload';

      LivereloadPlugin.prototype.config = {
        channel: '/docpad-livereload',
        enabled: false,
        getSocket: null,
        inject: true,
        generateBeforeBlock: null,
        generateAfterBlock: null,
        listenBlock: null,
        injectBlock: null,
        scriptBlock: null,
        styleBlock: null,
        socketOptions: {
          transformer: 'websockets',
          parser: 'json'
        },
        environments: {
          development: {
            enabled: true
          }
        }
      };

      LivereloadPlugin.prototype.populateCollections = function(opts) {
        var config, docpad, generateAfterBlock, generateBeforeBlock, injectBlock, listenBlock, scriptBlock, styleBlock;
        docpad = this.docpad;
        config = this.getConfig();
        generateBeforeBlock = config.generateBeforeBlock || "if ( typeof document.getElementsByTagName !== 'undefined' ) {\n	document.getElementsByTagName('html')[0].className += ' wait';\n}";
        generateAfterBlock = config.generateAfterBlock || "document.location.reload();";
        listenBlock = config.listenBlock || ("/* Did we just livereload? */\nvar log = !!(localStorage && console && console.log && true);\nif ( log && localStorage.getItem('" + config.channel + "/reloaded') === 'yes' ) {\n	localStorage.removeItem('" + config.channel + "/reloaded');\n	console.log('LiveReload completed at', new Date())\n}\n\n/* Listen for the regenerated event and perform a reload of the page when the event occurs */\nvar listen = function(){\n	var primus = new Primus('" + config.channel + "');\n	primus.on('data', function(data){\n		if ( data && data.message ) {\n			if ( data.message === 'generateBefore' ) {\n				if ( log ) {\n					console.log('LiveReload started at', new Date());\n				}\n				" + generateBeforeBlock + "\n			}\n			else if ( data.message === 'generateAfter' ) {\n				if ( log ) {\n					localStorage.setItem('" + config.channel + "/reloaded', 'yes');\n				}\n				" + generateAfterBlock + "\n			}\n		}\n	});\n};");
        injectBlock = config.injectBlock || "/* Inject socket into our page */\nvar inject = function(){\n	var t = document.createElement('script');\n	t.type = 'text/javascript';\n	t.async = 'async';\n	t.src = '/primus/primus.js';\n	t.onload = listen;\n	var s = document.getElementsByTagName('script')[0];\n	s.parentNode.insertBefore(t, s);\n};";
        scriptBlock = config.scriptBlock || (config.inject ? "(function(){\n	" + listenBlock + "\n	" + injectBlock + "\n	if ( typeof Primus !== 'undefined' ) {\n		listen();\n	} else {\n		inject();\n	}\n})();" : "(function(){\n	" + listenBlock + "\n	if ( typeof Primus !== 'undefined' ) {\n		listen();\n	}\n})();");
        styleBlock = config.styleBlock || "html.wait {\n	cursor: wait !important;\n	opacity: 0;\n	transition: opacity 0.5s ease;\n}";
        docpad.getBlock('scripts').add(scriptBlock, {
          defer: false
        });
        docpad.getBlock('styles').add(styleBlock);
        return this;
      };

      LivereloadPlugin.prototype.serverAfter = function(opts) {
        var Primus, config, docpad, existingSocket, extendr, plugin, server, serverHttp, socketOptions;
        server = opts.server, serverHttp = opts.serverHttp;
        plugin = this;
        docpad = this.docpad;
        config = this.getConfig();
        existingSocket = true;
        this.socket = typeof config.getSocket === "function" ? config.getSocket() : void 0;
        if (!this.socket) {
          extendr = require('extendr');
          Primus = require('primus');
          existingSocket = false;
          socketOptions = extendr.deepExtend({
            pathname: config.channel
          }, config.socketOptions);
          this.socket = new Primus(serverHttp);
          this.socket.on('error', docpad.warn);
        }
        docpad.log('info', "LiveReload listening to " + (existingSocket ? 'existing' : 'new') + " socket on channel " + config.channel);
        return this;
      };

      LivereloadPlugin.prototype.generateBefore = function() {
        var _ref;
        if ((_ref = this.socket) != null) {
          _ref.write({
            message: 'generateBefore'
          });
        }
        return this;
      };

      LivereloadPlugin.prototype.generateAfter = function() {
        var _ref;
        if ((_ref = this.socket) != null) {
          _ref.write({
            message: 'generateAfter'
          });
        }
        return this;
      };

      LivereloadPlugin.prototype.docpadDestroy = function() {
        var _ref;
        if ((_ref = this.socket) != null) {
          _ref.destroy({
            close: false,
            end: true
          });
        }
        return this;
      };

      return LivereloadPlugin;

    })(BasePlugin);
  };

}).call(this);
