// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  module.exports = function(BasePlugin) {
    var PartialsPlugin, Task, TaskGroup, extendr, pathUtil, util, _ref;
    extendr = require('extendr');
    _ref = require('taskgroup'), Task = _ref.Task, TaskGroup = _ref.TaskGroup;
    pathUtil = require('path');
    util = require('util');
    return PartialsPlugin = (function(_super) {
      __extends(PartialsPlugin, _super);

      PartialsPlugin.prototype.name = 'partials';

      PartialsPlugin.prototype.config = {
        partialsPath: 'partials',
        collectionName: 'partials',
        performanceFirst: false
      };

      PartialsPlugin.prototype.locale = {
        addingPartial: "Adding partial: %s",
        partialNotFound: "The partial \"%s\" was not found, as such it will not be rendered.",
        renderPartial: "Rendering partial: %s",
        renderedPartial: "Rendered partial: %s",
        renderPartialFailed: "Rendering partial failed: %s. The error follows:"
      };

      PartialsPlugin.prototype.foundPartials = null;

      PartialsPlugin.prototype.partialsCache = null;

      function PartialsPlugin() {
        var config, docpadConfig;
        PartialsPlugin.__super__.constructor.apply(this, arguments);
        docpadConfig = this.docpad.getConfig();
        config = this.getConfig();
        this.partialsCache = {};
        this.foundPartials = {};
        config.partialsPath = pathUtil.resolve(docpadConfig.srcPath, config.partialsPath);
      }

      PartialsPlugin.prototype.setConfig = function() {
        var config, docpadConfig;
        PartialsPlugin.__super__.setConfig.apply(this, arguments);
        docpadConfig = this.docpad.getConfig();
        config = this.getConfig();
        config.partialsPath = pathUtil.resolve(docpadConfig.srcPath, config.partialsPath);
        return this;
      };

      PartialsPlugin.prototype.populateCollections = function(opts, next) {
        var config, docpad;
        config = this.config;
        docpad = this.docpad;
        docpad.parseDocumentDirectory({
          path: config.partialsPath
        }, next);
        return this;
      };

      PartialsPlugin.prototype.extendCollections = function(opts) {
        var config, database, docpad, locale;
        config = this.getConfig();
        docpad = this.docpad;
        locale = this.locale;
        database = docpad.getDatabase();
        docpad.setCollection(config.collectionName, database.createLiveChildCollection().setQuery('isPartial', {
          $or: {
            isPartial: true,
            fullPath: {
              $startsWith: config.partialsPath
            }
          }
        }).on('add', function(model) {
          docpad.log('debug', util.format(locale.addingPartial, model.getFilePath()));
          return model.setDefaults({
            isPartial: true,
            render: false,
            write: false
          });
        }));
        return this;
      };

      PartialsPlugin.prototype.renderPartial = function(partial, next) {
        var cacheable, docpad, locale, partialsCache, result, _ref1, _ref2;
        docpad = this.docpad;
        locale = this.locale;
        partialsCache = this.partialsCache;
        result = null;
        cacheable = (_ref1 = partial.document.getMeta().get('cacheable')) != null ? _ref1 : false;
        if (cacheable === true) {
          result = (_ref2 = partialsCache[partial.cacheId]) != null ? _ref2 : null;
        }
        if (result != null) {
          return next(null, result);
        }
        docpad.renderDocument(partial.document, {
          templateData: partial.data
        }, function(err, result, document) {
          if (err) {
            return next(err);
          }
          if (cacheable === true) {
            partialsCache[partial.cacheId] = result;
          }
          return next(null, result);
        });
        return this;
      };

      PartialsPlugin.prototype.extendTemplateData = function(_arg) {
        var docpad, locale, me, templateData;
        templateData = _arg.templateData;
        me = this;
        docpad = this.docpad;
        locale = this.locale;
        templateData.partial = function() {
          var config, err, file, message, obj, objs, partial, partialFuzzyPath, partialName, _i, _len, _ref1;
          partialName = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          config = me.getConfig();
          if (typeof this.referencesOthers === "function") {
            this.referencesOthers();
          }
          file = this.documentModel;
          partial = {};
          partialFuzzyPath = pathUtil.join(config.partialsPath, partialName);
          if (partial.document == null) {
            partial.document = docpad.getCollection('partials').fuzzyFindOne(partialFuzzyPath);
          }
          if (!partial.document) {
            message = util.format(locale.partialNotFound, partialName);
            err = new Error(message);
            if (partial.err == null) {
              partial.err = err;
            }
            return message;
          }
          partial.data = {};
          if (config.performanceFirst === false) {
            if ((_ref1 = objs[0]) !== false && _ref1 !== this) {
              objs.unshift(this);
            }
          }
          for (_i = 0, _len = objs.length; _i < _len; _i++) {
            obj = objs[_i];
            if (!(obj || obj === true)) {
              continue;
            }
            extendr.shallowExtendPlainObjects(partial.data, obj);
          }
          partial.path = partial.document.getFilePath();
          partial.cacheId = partial.document.id;
          partial.id = Math.random();
          partial.container = '[partial:' + partial.id + ']';
          if (me.foundPartials[partial.id]) {
            return partial.container;
          }
          me.foundPartials[partial.id] = partial;
          partial.task = new Task("renderPartial: " + partial.path, function(complete) {
            return me.renderPartial(partial, function(err, result) {
              var _ref2, _ref3, _ref4;
              if (partial.err == null) {
                partial.err = err;
              }
              partial.result = (_ref2 = (_ref3 = (_ref4 = partial.err) != null ? _ref4.toString() : void 0) != null ? _ref3 : result) != null ? _ref2 : '???';
              return complete(partial.err);
            });
          });
          return partial.container;
        };
        return this;
      };

      PartialsPlugin.prototype.renderDocument = function(opts, next) {
        var file, filePath, me, partialContainerRegex, partialContainers, tasks, templateData;
        templateData = opts.templateData, file = opts.file;
        partialContainerRegex = /\[partial:([^\]]+)\]/g;
        partialContainers = (opts.content || '').match(partialContainerRegex) || [];
        if (partialContainers.length === 0) {
          return next();
        }
        filePath = file.getFilePath();
        me = this;
        tasks = new TaskGroup("Partials for " + filePath, {
          concurrency: 0,
          next: function(err) {
            opts.content = opts.content.replace(partialContainerRegex, function(match, partialId) {
              var partial;
              partial = me.foundPartials[partialId];
              return partial.result;
            });
            return next(err);
          }
        });
        partialContainers.forEach(function(partialContainer) {
          var partial, partialId;
          partialId = partialContainer.replace(partialContainerRegex, '$1');
          partial = me.foundPartials[partialId];
          if (partial.task) {
            return tasks.addTask(partial.task);
          }
        });
        tasks.run();
        return this;
      };

      PartialsPlugin.prototype.generateAfter = function() {
        this.foundPartials = {};
        return this.partialsCache = {};
      };

      return PartialsPlugin;

    })(BasePlugin);
  };

}).call(this);
