// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var StylusPlugin;
    return StylusPlugin = (function(_super) {
      __extends(StylusPlugin, _super);

      function StylusPlugin() {
        return StylusPlugin.__super__.constructor.apply(this, arguments);
      }

      StylusPlugin.prototype.name = 'stylus';

      StylusPlugin.prototype.config = {
        stylusLibraries: {
          nib: true
        },
        stylusOptions: {
          compress: true,
          'include css': true
        },
        environments: {
          development: {
            stylusOptions: {
              compress: false
            }
          }
        }
      };

      StylusPlugin.prototype.render = function(opts, next) {
        var config, content, file, inExtension, library, option, outExtension, style, stylus, value, _ref, _ref1;
        inExtension = opts.inExtension, outExtension = opts.outExtension, content = opts.content, file = opts.file;
        config = this.getConfig();
        if ((inExtension === 'styl' || inExtension === 'stylus') && (outExtension === 'css' || outExtension === null)) {
          stylus = require('stylus');
          style = stylus(opts.content).set('filename', file.get('fullPath'));
          _ref = config.stylusOptions;
          for (option in _ref) {
            if (!__hasProp.call(_ref, option)) continue;
            value = _ref[option];
            style.set(option, value);
          }
          _ref1 = config.stylusLibraries;
          for (library in _ref1) {
            if (!__hasProp.call(_ref1, library)) continue;
            value = _ref1[library];
            if (!value) {
              continue;
            }
            if (value === true) {
              value = void 0;
            }
            style.use(require(library)(value));
          }
          return style.render(function(err, output) {
            if (err) {
              return next(err);
            }
            opts.content = output;
            return next();
          });
        } else {
          return next();
        }
      };

      return StylusPlugin;

    })(BasePlugin);
  };

}).call(this);
